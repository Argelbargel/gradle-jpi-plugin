package org.jenkinsci.gradle.plugins.jpi

import org.gradle.api.Project
import org.gradle.testfixtures.ProjectBuilder
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import spock.lang.Specification

class TestInsertionTaskSpec extends Specification {
    public static final String BASE_PROJECT = """
            plugins {
                id 'org.jenkins-ci.jpi'
                id 'java'
            }

            jenkinsPlugin {
                coreVersion = '1.509.3'
                disabledTestInjection = false
            }
        """
    @Rule
    TemporaryFolder temporaryFolder = new TemporaryFolder()

    Project project = ProjectBuilder.builder().build()

    def 'test is inserted'() {
        setup:
        prepareProject(BASE_PROJECT)
        def projectDir = new File(temporaryFolder.root, 'test')
        when:
        insertTest(projectDir)
        def test = testContent(
                projectDir,
                new File(projectDir, '/build/resources/main'),
                new File(projectDir, '/build/resources/test'),
                'hpi')
        then:
        new File(projectDir, 'build/inject-tests/InjectedTest.java').text == test
    }

    private static void insertTest(projectDir) {
        GradleRunner.create()
                .withProjectDir(projectDir)
                .withPluginClasspath()
                .withArguments('insertTest')
                .build()
    }

    private void prepareProject(project, dependencies = [:]) {
        if (!dependencies.empty) {
            project += 'dependencies {\n'
            dependencies.each { k, v -> project += "$k '$v'\n" }
            project += '}'
        }
        temporaryFolder.newFolder('test', 'src', 'main', 'java')
        temporaryFolder.newFile('test/build.gradle') << project
        temporaryFolder.newFile('test/src/main/java/TestPlugin.java') << 'class TestPlugin extends hudson.Plugin {}'
    }

    private String testContent(baseDir, outputDir, testOutputDir, packaging) {
        """import java.util.HashMap;
import junit.framework.Test;
import junit.framework.TestCase;
import org.jvnet.hudson.test.PluginAutomaticTestBuilder;

/**
 * Entry point to auto-generated tests (generated by gradle-jpi-plugin).
 */
public class InjectedTest extends TestCase {
    public static Test suite() throws Exception {
        HashMap<String, String> parameters = new HashMap<String, String>();
        parameters.put("basedir", ${quote(baseDir)});
        parameters.put("artifactId", "test");
        parameters.put("outputDirectory", ${quote(outputDir)});
        parameters.put("testOutputDirectory", ${quote(testOutputDir)});
        parameters.put("packaging", "${packaging}");
        parameters.put("requirePI", "true");
        return PluginAutomaticTestBuilder.build(parameters);
    }
}
"""
    }

    private static String quote(File file) {
        "\"${file.absolutePath.replace('\\', '\\\\')}\""
    }

}
